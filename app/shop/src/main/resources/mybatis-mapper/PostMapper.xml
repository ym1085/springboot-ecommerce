<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.shoppingmall.mapper.PostMapper">

    <!-- 검색 키워드가 존재하는 경우 -->
    <sql id="search">
        <if test="searchKeyword != null and searchKeyword != ''">
            <choose>
                <when test="searchType != null and searchType != '' and 'title'.equals(searchType)">
                    AND title LIKE CONCAT('%', #{searchKeyword}, '%')
                </when>
                <when test="searchType != null and searchType != '' and 'content'.equals(searchType)">
                    AND content LIKE CONCAT('%', #{searchKeyword}, '%')
                </when>
                <when test="searchType != null and searchType != '' and 'writer'.equals(searchType)">
                    AND EXISTS (
                        SELECT 1
                        FROM MEMBER m
                        WHERE m.member_id = p.member_id
                        AND m.use_yn = 'Y'
                        AND m.cert_yn = 'Y'
                        AND m.name LIKE CONCAT('%', #{searchKeyword}, '%')
                    )
                </when>
                <otherwise>
                    AND (
                        title LIKE CONCAT('%', #{searchKeyword}, '%')
                        OR content LIKE CONCAT('%', #{searchKeyword}, '%')
                        OR EXISTS (
                            SELECT 1
                            FROM MEMBER m
                            WHERE m.member_id = p.member_id
                            AND m.use_yn = 'Y'
                            AND m.cert_yn = 'Y'
                            AND m.name LIKE CONCAT('%', #{searchKeyword}, '%')
                        )
                    )
                </otherwise>
            </choose>
        </if>
    </sql>

    <!--
        https://www.sysout.co.kr/home/webbook/page/read/643;jsessionid=54B3D5320E73A41FC4088D5E3D322141
        아래 부분은 조금 고민 Map or VO에 그냥 필드 넣어서 처리가 가능하긴 한데 resultMap으로 하는게 좋을 듯?
        그래도 1 : N 처리를 위해 resultMap을 사용해서 일단 처리하고 추후 테이블이 복잡해지면 VO를 분리할 것
     -->
    <resultMap id="PostResultMap" type="Post">
        <id property="postId" column="POST_ID" />
        <result property="memberId" column="MEMBER_ID" />
        <result property="title" column="TITLE" />
        <result property="content" column="CONTENT" />
        <result property="categoryId" column="CATEGORY_ID" />
        <result property="categoryName" column="CATEGORYNAME" />
        <result property="writer" column="WRITER" />
        <result property="readCnt" column="READ_CNT" />
        <result property="fixedYn" column="FIXED_YN" />
        <result property="delYn" column="DEL_YN" />
        <result property="createDate" column="CREATE_DATE" />
        <result property="updateDate" column="UPDATE_DATE" />
        <result property="deleteDate" column="DELETE_DATE" />

        <!-- 1(Post) : N(PostFiles) -->
        <collection property="postFiles" resultMap="PostFilesResultMap" />
        <!-- 1(Post) : N(Comments) -->
        <collection property="comments" resultMap="CommentsResultMap" />
    </resultMap>

    <!-- 게시글에 매핑된 파일 정보 -->
    <resultMap id="PostFilesResultMap" type="PostFiles">
        <id property="postFileId" column="POST_FILE_ID" />
        <result property="postId" column="POST_ID" />
        <result property="originFileName" column="ORIGIN_FILE_NAME" />
        <result property="storedFileName" column="STORED_FILE_NAME" />
        <result property="filePath" column="FILE_PATH" />
        <result property="fileSize" column="FILE_SIZE" />
        <result property="fileExp" column="FILE_EXP" />
        <result property="delYn" column="DEL_YN" />
        <result property="createDate" column="CREATE_DATE" />
        <result property="deleteDate" column="DELETE_DATE" />
        <result property="fileAttached" column="FILE_ATTACHED" />
        <result property="downloadCnt" column="DOWNLOAD_CNT" />
    </resultMap>

    <!-- 게시글에 매핑된 댓글 정보 -->
    <resultMap id="CommentsResultMap" type="Comment">
        <id property="commentId" column="COMMENT_ID" />
        <result property="parentId" column="PARENT_ID" />
        <result property="postId" column="POST_ID" />
        <result property="content" column="COMMENT_CONTENT" />
        <result property="memberId" column="COMMENT_MEMBER_ID" />
        <result property="delYn" column="COMMENT_DEL_YN" />
        <result property="path" column="PATH" />
        <result property="createDate" column="COMMENT_CREATE_DATE" />
        <result property="updateDate" column="COMMENT_UPDATE_DATE" />
    </resultMap>

    <!-- 전체 게시글 조회 -->
    <!--
        Mybatis에서 쿼리의 parameterType이 클래스의 객체인 경우, XML Mapper의 #{parameter}
        는 맴버 변수의 getter에 해당. 쉽게 말해 getter를 통해 파라미터 바인딩 수행.
    -->
    <select id="getPosts" parameterType="SearchRequestDto" resultMap="PostResultMap">
        SELECT
            p.post_id,
            p.title,
            p.content,
            (select m.name from member m where m.member_id = p.member_id and m.use_yn = 'y' and m.cert_yn = 'y') AS writer,
            p.category_id,
            (select c.category_name from post_category c where c.category_id = p.category_id) AS categoryName,
            p.read_cnt,
            p.fixed_yn,
            p.del_yn,
            p.create_date,
            p.update_date,
            p.delete_date,
            f.post_file_id,
            f.post_id,
            f.origin_file_name,
            f.stored_file_name,
            f.file_path,
            f.file_size,
            f.file_exp,
            f.download_cnt,
            f.del_yn,
            f.create_date,
            f.delete_date,
            f.file_attached
        FROM post p LEFT OUTER JOIN post_file f
        ON p.post_id = f.post_id
        WHERE p.del_yn != 'Y'
        <include refid="search" />
        ORDER BY
            p.create_date DESC,
            p.post_id DESC
        LIMIT #{pagination.limitStart}, #{recordSizePerPage}
    </select>

    <!-- 게시글 수 카운팅 -->
    <select id="count" parameterType="SearchRequestDto" resultType="int">
        SELECT COUNT(*) AS cnt
        FROM post p
        WHERE p.del_yn = 'N'
        <include refid="search" />
    </select>

    <!-- 단일 게시글 조회 -->
    <select id="getPostByPostId" parameterType="int" resultType="Post">
        SELECT
            p.post_id,
            p.title,
            p.content,
            p.member_id,
            (SELECT m.name
             FROM member m
             WHERE m.member_id = p.member_id
             AND m.use_yn = 'y' AND m.cert_yn = 'y') AS writer,
            p.category_id,
            (SELECT c.category_name
             FROM post_category c
             WHERE c.category_id = p.category_id) AS categoryName,
            p.read_cnt,
            p.fixed_yn,
            p.del_yn,
            p.create_date,
            p.update_date,
            p.delete_date,
            pf.post_file_id,
            pf.origin_file_name,
            pf.stored_file_name,
            pf.file_path,
            pf.file_size,
            pf.file_exp,
            pf.download_cnt,
            pf.create_date AS file_create_date,
            pf.delete_date AS file_delete_date,
            pf.del_yn AS file_del_yn,
            pf.file_attached,
            cmt.comment_id,
            cmt.parent_id,
            cmt.content AS comment_content,
            cmt.member_id AS comment_member_id,
            cmt.del_yn AS comment_del_yn,
            cmt.create_date AS comment_create_date,
            cmt.update_date AS comment_update_date
        FROM post p
        LEFT OUTER JOIN post_file pf ON p.post_id = pf.post_id
        LEFT OUTER JOIN comment cmt ON p.post_id = cmt.post_id
        WHERE p.post_id = #{postId}
        AND p.del_yn != 'Y'
    </select>

    <!-- 게시글 등록 -->
    <insert id="savePost" parameterType="PostSaveRequestDto" useGeneratedKeys="true" keyProperty="postId">
        INSERT INTO post (member_id, title, content, fixed_yn, category_id)
        VALUE
            (
                #{memberId},
                #{title},
                #{content},
                #{fixedYn},
                <choose>
                    <when test="categoryId != null and categoryId != ''">
                        #{categoryId}
                    </when>
                    <otherwise>
                        '999'
                    </otherwise>
                </choose>
            )
    </insert>

    <!-- 게시글 수정 -->
    <update id="updatePost" parameterType="PostUpdateRequestDto">
        UPDATE post
        SET
            title = #{title},
            content = #{content},
            fixed_yn = #{fixedYn} /* Admin인 경우에만 수정/삭제 가능 하도록 수정 필요 */
        WHERE post_id = #{postId}
        AND member_id = #{memberId}
        AND del_yn = 'N'
    </update>

    <!-- 게시글 삭제 -->
    <update id="deletePostByPostId" parameterType="int">
        UPDATE post
        SET
            del_yn = 'Y',
            delete_date = NOW()
        WHERE post_id = #{postId}
    </update>

    <!-- 조회수 증가 -->
    <update id="increasePostByPostId" parameterType="int">
        UPDATE post
        SET
            read_cnt = read_cnt + 1
        WHERE post_id = #{postId}
        AND del_yn = 'N'
    </update>
</mapper>
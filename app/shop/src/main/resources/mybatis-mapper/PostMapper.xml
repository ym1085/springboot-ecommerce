<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.shoppingmall.repository.PostMapper">

    <sql id="subCategoryId">
        <if test="subCategoryId != null and subCategoryId != ''">
        </if>
    </sql>

    <!-- 검색 키워드가 존재하는 경우 -->
    <sql id="search">
        <if test="searchKeyword != null and searchKeyword != ''">
            <choose>
                <when test="searchType != null and searchType != '' and 'title'.equals(searchType)">
                    AND TITLE LIKE CONCAT('%', #{searchKeyword}, '%')
                </when>
                <when test="searchType != null and searchType != '' and 'content'.equals(searchType)">
                    AND CONTENT LIKE CONCAT('%', #{searchKeyword}, '%')
                </when>
                <when test="searchType != null and searchType != '' and 'writer'.equals(searchType)">
                    AND EXISTS (
                        SELECT 1
                        FROM MEMBER M
                        WHERE M.MEMBER_ID = P.MEMBER_ID
                        AND M.USE_YN = 'Y'
                        AND M.CERT_YN = 'Y'
                        AND M.NAME LIKE CONCAT('%', #{searchKeyword}, '%')
                    )
                </when>
                <otherwise>
                    AND (
                        TITLE LIKE CONCAT('%', #{searchKeyword}, '%')
                        OR CONTENT LIKE CONCAT('%', #{searchKeyword}, '%')
                        OR EXISTS (
                            SELECT 1
                            FROM MEMBER M
                            WHERE M.MEMBER_ID = P.MEMBER_ID
                            AND M.USE_YN = 'Y'
                            AND M.CERT_YN = 'Y'
                            AND M.NAME LIKE CONCAT('%', #{searchKeyword}, '%')
                        )
                    )
                </otherwise>
            </choose>
        </if>
    </sql>

    <!--
        https://www.sysout.co.kr/home/webbook/page/read/643;jsessionid=54B3D5320E73A41FC4088D5E3D322141
        아래 부분은 조금 고민 Map or VO에 그냥 필드 넣어서 처리가 가능하긴 한데 resultMap으로 하는게 좋을 듯?
        그래도 1 : N 처리를 위해 resultMap을 사용해서 일단 처리하고 추후 테이블이 복잡해지면 VO를 분리할 것
     -->
    <resultMap id="PostResultMap" type="Post">
        <id property="postId" column="POST_ID" />
        <result property="memberId" column="MEMBER_ID" />
        <result property="title" column="TITLE" />
        <result property="content" column="CONTENT" />
        <result property="categoryId" column="CATEGORY_ID" />
        <result property="categoryName" column="CATEGORYNAME" />
        <result property="writer" column="WRITER" />
        <result property="readCnt" column="READ_CNT" />
        <result property="fixedYn" column="FIXED_YN" />
        <result property="delYn" column="DEL_YN" />
        <result property="createDate" column="CREATE_DATE" />
        <result property="updateDate" column="UPDATE_DATE" />
        <result property="deleteDate" column="DELETE_DATE" />

        <!-- 1(Post) : N(PostFiles) -->
        <collection property="postFiles" resultMap="PostFilesResultMap" />
    </resultMap>

    <resultMap id="PostFilesResultMap" type="PostFiles">
        <id property="postFileId" column="POST_FILE_ID" />
        <result property="postId" column="POST_ID" />
        <result property="originFileName" column="ORIGIN_FILE_NAME" />
        <result property="storedFileName" column="STORED_FILE_NAME" />
        <result property="filePath" column="FILE_PATH" />
        <result property="fileSize" column="FILE_SIZE" />
        <result property="fileType" column="FILE_TYPE" />
        <result property="downloadCnt" column="DOWNLOAD_CNT" />
        <result property="delYn" column="DEL_YN" />
        <result property="createDate" column="CREATE_DATE" />
        <result property="deleteDate" column="DELETE_DATE" />
        <result property="fileAttached" column="FILE_ATTACHED" />
    </resultMap>

    <!-- 전체 게시글 조회 -->
    <!--
        Mybatis에서 쿼리의 parameterType이 클래스의 객체인 경우, XML Mapper의 #{parameter}
        는 맴버 변수의 getter에 해당. 쉽게 말해 getter를 통해 파라미터 바인딩 수행.
    -->
    <select id="getPosts" parameterType="SearchRequestDto" resultMap="PostResultMap">
        SELECT
            P.POST_ID,
            P.TITLE,
            P.CONTENT,
            (SELECT M.NAME FROM MEMBER M WHERE M.MEMBER_ID = P.MEMBER_ID AND M.USE_YN = 'Y' AND M.CERT_YN = 'Y') AS WRITER,
            P.CATEGORY_ID,
            (SELECT C.CATEGORY_NAME FROM POST_CATEGORY C WHERE C.CATEGORY_ID = P.CATEGORY_ID) AS CATEGORYNAME,
            P.READ_CNT,
            P.FIXED_YN,
            P.DEL_YN,
            P.CREATE_DATE,
            P.UPDATE_DATE,
            P.DELETE_DATE,
            F.POST_FILE_ID,
            F.POST_ID,
            F.ORIGIN_FILE_NAME,
            F.STORED_FILE_NAME,
            F.FILE_PATH,
            F.FILE_SIZE,
            F.FILE_TYPE,
            F.DOWNLOAD_CNT,
            F.DEL_YN,
            F.CREATE_DATE,
            F.DELETE_DATE,
            F.FILE_ATTACHED
        FROM POST P
            LEFT OUTER JOIN POST_FILE F
        ON P.POST_ID = F.POST_ID
        WHERE P.DEL_YN != 'Y'
            <include refid="search" />
        ORDER BY P.CREATE_DATE DESC,
                 P.POST_ID DESC
        LIMIT #{pagination.limitStart}, #{recordSizePerPage}
    </select>

    <!-- 게시글 수 카운팅 -->
    <select id="count" parameterType="SearchRequestDto" resultType="int">
        SELECT COUNT(*)
        FROM POST P
        WHERE
            P.DEL_YN = 'N'
            <include refid="search" />
    </select>

    <!-- 단일 게시글 조회 -->
    <select id="getPostById" parameterType="long" resultType="Post">
        SELECT
            P.POST_ID,
            P.TITLE,
            P.CONTENT,
            P.MEMBER_ID,
            (SELECT M.NAME FROM MEMBER M WHERE M.MEMBER_ID = P.MEMBER_ID AND M.USE_YN = 'Y' AND M.CERT_YN = 'Y') AS WRITER,
            P.CATEGORY_ID,
            (SELECT C.CATEGORY_NAME FROM POST_CATEGORY C WHERE C.CATEGORY_ID = P.CATEGORY_ID) AS CATEGORYNAME,
            P.READ_CNT,
            P.FIXED_YN,
            P.DEL_YN,
            P.CREATE_DATE,
            P.UPDATE_DATE,
            P.DELETE_DATE
        FROM POST P
        WHERE P.POST_ID = #{postId}
        AND P.DEL_YN != 'Y'
    </select>

    <!-- 게시글 등록 -->
    <insert id="savePost" parameterType="Post" useGeneratedKeys="true" keyProperty="postId">
        INSERT INTO POST (MEMBER_ID, TITLE, CONTENT, FIXED_YN, CATEGORY_ID)
        VALUE
            (
                #{memberId},
                #{title},
                #{content},
                #{fixedYn},
                <choose>
                    <when test="categoryId != null and categoryId != ''">
                        #{categoryId}
                    </when>
                    <otherwise>
                        '999'
                    </otherwise>
                </choose>
            )
    </insert>

    <!-- 게시글 수정 -->
    <update id="updatePostById" parameterType="Post">
        UPDATE POST
        SET
            TITLE = #{title},
            CONTENT = #{content},
            FIXED_YN = #{fixedYn} /* Admin인 경우에만 수정/삭제 가능 하도록 수정 필요 */
        WHERE POST_ID = #{postId}
        AND MEMBER_ID = #{memberId}
        AND DEL_YN = 'N'
    </update>

    <!-- 게시글 삭제 -->
    <update id="deletePostById" parameterType="Post" useGeneratedKeys="true" keyProperty="postId">
        UPDATE POST
        SET
            DEL_YN = 'Y',
            DELETE_DATE = NOW()
        WHERE POST_ID = #{postId}
    </update>
</mapper>
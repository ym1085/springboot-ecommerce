<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.shoppingmall.mapper.CommentMapper">

    <!-- 상세 게시글 화면에 들어오는 순간 댓글 목록도 같이 나간다 -->
    <select id="getComments" parameterType="int" resultType="Comment">
        WITH RECURSIVE CTE AS (
            SELECT
                parent.comment_id,
                parent.parent_id,
                parent.post_id,
                parent.content,
                parent.member_id,
                parent.del_yn,
                parent.create_date,
                parent.update_date,
                convert(parent.comment_id, char) AS path /* 댓글의 계층 구조를 추적하기 위함 ( path : 1-2-3 || 2-3-4 ) */
            FROM COMMENT parent
            WHERE parent.parent_id IS NULL /* 최상위 부모 댓글 의미 */
              AND parent.post_id = #{postId}
            UNION ALL
            SELECT
                child.comment_id,
                child.parent_id,
                child.post_id,
                child.content,
                child.member_id,
                child.del_yn,
                child.create_date,
                child.update_date,
                concat(cte.comment_id, '-', child.comment_id) AS path /* 부모 path에 '-' 구분 기호를 사용하여 하위 댓글 계층 구조를 표현 */
            FROM COMMENT child
                JOIN CTE
                    ON child.parent_id = cte.comment_id
            WHERE
                child.post_id = #{postId}
        )

        SELECT
            pc.comment_id,
            pc.parent_id,
            pc.post_id,
            pc.content,
            pc.member_id,
            pc.del_yn,
            pc.create_date,
            pc.update_date,
            pc.path AS path
        FROM CTE pc
        WHERE pc.DEL_YN = 'N'
        ORDER BY
            convert(SUBSTRING_INDEX(path, '-', 1), UNSIGNED) ASC, /* 부모 path 기준 오름차순 정렬 ( 1 || 2 ) */
            comment_id ASC, /* 부모 기준 오름차순 정렬 */
            convert(SUBSTRING_INDEX(path, '-', 2), UNSIGNED) ASC, /* 자식 path 기준 오름차순 정렬 ( 1-2 || 1-3 ) */
            comment_id ASC; /* 자식 기준 오름차순 정렬 */
    </select>

    <!-- 댓글 정보 존재 여부 반환 -->
    <select id="getCommentCountByCommentId" parameterType="int" resultType="int">
        SELECT COUNT(*)
        FROM COMMENT
        WHERE comment_id = #{commentId}
    </select>

    <!--
        댓글 정보 저장
        - parentId가 null이 아닌 경우 : 대댓글 등록
        - null인 경우 : 일반 댓글 등록

        (*) null을 넣는 이유는 재귀 쿼리 참고하시면 될 것 같습니다.
    -->
    <insert id="saveComment" parameterType="Comment">
        <!--<selectKey keyProperty="commentId" order="AFTER" resultType="int" >
            SELECT COMMENT_ID.nextval FROM DUAL
        </selectKey>-->

        INSERT INTO COMMENT(
            parent_id
            , post_id
            , content
            , member_id
            , del_yn
            , create_date
            , update_date
        ) VALUES
        (
            <choose>
                <when test="parentId != null and parentId != ''">
                    #{parentId}
              </when>
              <otherwise>
                  NULL
                </otherwise>
            </choose>
            , #{postId}
            , #{content}
            , #{memberId}
            , 'N'
            , NOW()
            , NOW()
        )
    </insert>

    <!-- 부모 댓글 삭제 시 하위 대댓글도 전부 'N' 삭제 처리 -->
    <update id="deleteComment" parameterType="Comment">
        UPDATE COMMENT
        SET del_yn = 'Y'
        WHERE comment_id IN (
            SELECT comment_id
            FROM (
                SELECT comment_id
                FROM COMMENT
                WHERE comment_id = #{commentId}
                OR parent_id = #{commentId}
            ) A
        )
    </update>

    <!-- 하위 대댓글 삭제 시 사용 -->
    <update id="deleteCommentReply" parameterType="Comment">
        UPDATE COMMENT
        SET del_yn = 'Y'
        WHERE comment_id = #{commentId}
    </update>

    <!-- 하위 대댓글 존재 여부 확인  -->
    <select id="getCommentReplyCountByCommentId" parameterType="int" resultType="int">
        SELECT COUNT(*) AS CNT
        FROM COMMENT
        WHERE comment_id IN ( /* 일반 댓글 삭제 시 하위 대댓글이 존재하는 경우 */
            SELECT comment_id
            FROM (
                 SELECT comment_id
                 FROM COMMENT
                 WHERE parent_id = #{commentId}
             ) A
        )
    </select>

    <!-- 댓글 수정, 댓글은 1:1 로만 수정이 가능 -->
    <update id="updateCommentByCommentId" parameterType="Comment">
        UPDATE COMMENT
        SET content = #{content}
        WHERE comment_id = #{commentId}
    </update>
</mapper>

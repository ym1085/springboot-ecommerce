<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.shoppingmall.repository.CommentMapper">

    <!-- 상세 게시글 화면에 들어오는 순간 댓글 목록도 같이 나간다 -->
    <select id="getComments" parameterType="long" resultType="Comment">
        WITH recursive parent_comment AS (
            SELECT
                p.comment_id,
                p.parent_id,
                p.post_id,
                p.content,
                p.member_id,
                p.del_yn,
                p.create_date,
                p.update_date,
                convert(p.comment_id, char) AS path -- 댓글의 계층 구조를 추적하기 위함 ( path : 1-2-3 || 2-3-4 )
            FROM comment p
            WHERE p.parent_id IS NULL -- 최상위 부모 댓글 의미
              AND p.post_id = #{postId}
            UNION ALL
            SELECT
                c.post_id,
                c.parent_id,
                c.post_id,
                c.content,
                c.member_id,
                c.del_yn,
                c.create_date,
                c.update_date,
                concat(parent_comment.comment_id, '-', c.comment_id) AS path -- 부모 path에 '-' 구분 기호를 사용하여 하위 댓글 계층 구조를 표현
            FROM comment c
                JOIN parent_comment
                    ON c.parent_id = parent_comment.comment_id
            WHERE
                c.post_id = #{postId}
        )

        SELECT 
            pc.comment_id,
            pc.parent_id,
            pc.post_id,
            pc.content,
            pc.member_id,
            pc.del_yn,
            pc.create_date,
            pc.update_date,
            pc.path AS path
        FROM parent_comment pc
        WHERE pc.del_yn = 'N'
        ORDER BY
            convert(SUBSTRING_INDEX(path, '-', 1), UNSIGNED) ASC, -- 부모 path 기준 오름차순 정렬 ( 1 || 2 )
            comment_id ASC, -- 부모 기준 오름차순 정렬
            convert(SUBSTRING_INDEX(path, '-', 2), UNSIGNED) ASC, -- 자식 path 기준 오름차순 정렬 ( 1-2 || 1-3 )
            comment_id ASC; -- 자식 기준 오름차순 정렬
    </select>

    <!-- 댓글 정보 존재 여부 반환 -->
    <select id="getCommentCountById" parameterType="long" resultType="int">
        SELECT COUNT(*) FROM comment WHERE comment_id = #{commentId}
    </select>

    <!--
        댓글 정보 저장
        - parentId가 null이 아닌 경우 : 대댓글 등록
        - null인 경우 : 일반 댓글 등록

        (*) null을 넣는 이유는 재귀 쿼리 참고하시면 될 것 같습니다.
    -->
    <insert id="saveComment" parameterType="Comment">
        INSERT INTO comment(
            parent_id
            , post_id
            , content
            , member_id
            , del_yn
            , create_date
            , update_date
        ) VALUES
        (
            <choose>
                <when test="parentId != null and parentId != ''">
                    #{parentId}
              </when>
              <otherwise>
                  NULL
                </otherwise>
            </choose>
            , #{postId}
            , #{content}
            , #{memberId}
            , 'N'
            , NOW()
            , NOW()
        )
    </insert>

    <!-- 대댓글이 있는 부모 댓글 삭제 시 사용 -->
    <update id="deleteCommentByCommentIdAndParentId" parameterType="Comment">
        UPDATE comment
        SET del_yn = 'Y'
        WHERE comment_id IN ( /* 일반 댓글 삭제 시 하위 대댓글이 존재하는 경우 */
            SELECT comment_id
            FROM (
                SELECT comment_id
                FROM comment
                WHERE comment_id = #{commentId}
                OR parent_id = #{parentId}
            ) A
        )
    </update>

    <!-- 대댓글 + 대댓글이 없는 일반 댓글 삭제 시 사용 -->
    <update id="deleteCommentByCommentId" parameterType="Comment">
        UPDATE comment
        SET del_yn = 'Y'
        WHERE comment_id = #{commentId}
    </update>

    <!-- 하위 대댓글 존재 여부 확인  -->
    <select id="getChildCommentCountById" parameterType="long" resultType="int">
        select COUNT(*) AS cnt
        from comment
        WHERE comment_id IN ( /* 일반 댓글 삭제 시 하위 대댓글이 존재하는 경우 */
            SELECT comment_id
            FROM (
                 SELECT comment_id
                 FROM comment
                 WHERE parent_id = #{commentId}
             ) A
        )
    </select>

    <!-- 댓글 수정, 댓글은 1:1 로만 수정이 가능 -->
    <update id="updateCommentById" parameterType="Comment">
        UPDATE comment
        SET content = #{content}
        WHERE comment_id = #{commentId}
    </update>
</mapper>

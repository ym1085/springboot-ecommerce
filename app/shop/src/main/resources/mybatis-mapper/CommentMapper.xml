<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.shoppingmall.repository.CommentMapper">

    <!-- 상세 게시글 화면에 들어오는 순간 댓글 목록도 같이 나간다 -->
    <select id="getComments" parameterType="long" resultType="Comment">
        WITH RECURSIVE CTE AS (
            SELECT
                PARENT.COMMENT_ID,
                PARENT.PARENT_ID,
                PARENT.POST_ID,
                PARENT.CONTENT,
                PARENT.MEMBER_ID,
                PARENT.DEL_YN,
                PARENT.CREATE_DATE,
                PARENT.UPDATE_DATE,
                CONVERT(PARENT.COMMENT_ID, CHAR) AS PATH /* 댓글의 계층 구조를 추적하기 위함 ( path : 1-2-3 || 2-3-4 ) */
            FROM COMMENT PARENT
            WHERE PARENT.PARENT_ID IS NULL /* 최상위 부모 댓글 의미 */
              AND PARENT.POST_ID = #{postId}
            UNION ALL
            SELECT
                CHILD.POST_ID,
                CHILD.PARENT_ID,
                CHILD.POST_ID,
                CHILD.CONTENT,
                CHILD.MEMBER_ID,
                CHILD.DEL_YN,
                CHILD.CREATE_DATE,
                CHILD.UPDATE_DATE,
                CONCAT(CTE.COMMENT_ID, '-', CHILD.COMMENT_ID) AS PATH /* 부모 path에 '-' 구분 기호를 사용하여 하위 댓글 계층 구조를 표현 */
            FROM COMMENT CHILD
                JOIN CTE
                    ON CHILD.PARENT_ID = CTE.COMMENT_ID
            WHERE
                CHILD.POST_ID = #{postId}
        )

        SELECT
            PC.COMMENT_ID,
            PC.PARENT_ID,
            PC.POST_ID,
            PC.CONTENT,
            PC.MEMBER_ID,
            PC.DEL_YN,
            PC.CREATE_DATE,
            PC.UPDATE_DATE,
            PC.PATH AS PATH
        FROM CTE PC
        WHERE PC.DEL_YN = 'N'
        ORDER BY
            convert(SUBSTRING_INDEX(PATH, '-', 1), UNSIGNED) ASC, /* 부모 path 기준 오름차순 정렬 ( 1 || 2 ) */
            COMMENT_ID ASC, /* 부모 기준 오름차순 정렬 */
            convert(SUBSTRING_INDEX(PATH, '-', 2), UNSIGNED) ASC, /* 자식 path 기준 오름차순 정렬 ( 1-2 || 1-3 ) */
            COMMENT_ID ASC; /* 자식 기준 오름차순 정렬 */
    </select>

    <!-- 댓글 정보 존재 여부 반환 -->
    <select id="getCommentCountByCommentId" parameterType="long" resultType="int">
        SELECT COUNT(*)
        FROM COMMENT
        WHERE COMMENT_ID = #{commentId}
    </select>

    <!--
        댓글 정보 저장
        - parentId가 null이 아닌 경우 : 대댓글 등록
        - null인 경우 : 일반 댓글 등록

        (*) null을 넣는 이유는 재귀 쿼리 참고하시면 될 것 같습니다.
    -->
    <insert id="saveComment" parameterType="Comment">
        <!--<selectKey keyProperty="commentId" order="AFTER" resultType="int" >
            SELECT COMMENT_ID.nextval FROM DUAL
        </selectKey>-->

        INSERT INTO COMMENT(
            PARENT_ID
            , POST_ID
            , CONTENT
            , MEMBER_ID
            , DEL_YN
            , CREATE_DATE
            , UPDATE_DATE
        ) VALUES
        (
            <choose>
                <when test="parentId != null and parentId != ''">
                    #{parentId}
              </when>
              <otherwise>
                  NULL
                </otherwise>
            </choose>
            , #{postId}
            , #{content}
            , #{memberId}
            , 'N'
            , NOW()
            , NOW()
        )
    </insert>

    <!-- 대댓글이 있는 부모 댓글 삭제 시 사용 -->
    <update id="deleteCommentByCommentIdAndParentId" parameterType="Comment">
        UPDATE COMMENT
        SET DEL_YN = 'Y'
        WHERE COMMENT_ID IN ( /* 일반 댓글 삭제 시 하위 대댓글이 존재하는 경우 */
            SELECT COMMENT_ID
            FROM (
                SELECT COMMENT_ID
                FROM COMMENT
                WHERE COMMENT_ID = #{commentId}
                OR PARENT_ID = #{parentId}
            ) A
        )
    </update>

    <!-- 단일 댓글 삭제 시 사용 -->
    <update id="deleteCommentByCommentId" parameterType="Comment">
        UPDATE COMMENT
        SET DEL_YN = 'Y'
        WHERE COMMENT_ID = #{commentId}
    </update>

    <!-- 하위 대댓글 존재 여부 확인  -->
    <select id="getChildCommentCountById" parameterType="long" resultType="int">
        SELECT COUNT(*) AS CNT
        FROM COMMENT
        WHERE COMMENT_ID IN ( /* 일반 댓글 삭제 시 하위 대댓글이 존재하는 경우 */
            SELECT COMMENT_ID
            FROM (
                 SELECT COMMENT_ID
                 FROM COMMENT
                 WHERE PARENT_ID = #{commentId}
             ) A
        )
    </select>

    <!-- 댓글 수정, 댓글은 1:1 로만 수정이 가능 -->
    <update id="updateCommentByCommentId" parameterType="Comment">
        UPDATE COMMENT
        SET CONTENT = #{content}
        WHERE COMMENT_ID = #{commentId}
    </update>
</mapper>
